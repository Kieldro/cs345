/* hello.jj is fun */
options {
	STATIC = false;
}

PARSER_BEGIN(hello)
	class hello {
		public static boolean DEBUG = true;
		// not public in javacc tutorial
		public static void main( String[] args ) throws ParseException, TokenMgrError {
			hello parser = new hello( System.in );
			if (DEBUG) System.out.println("Calling foo()...");
			parser.foo();
		}
	}

PARSER_END(hello)

// specifications for token manager/ lexical anylizer/ tokenizer
SKIP: {
	  " "		// skip spaces
	| "\t"
	| "\n"
	| "\r"
	| "\r\n"
}

// maximal munch rule will use the longest token
TOKEN: {
	  < CHAR:	"a">
	| < NUM:	<DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> >
	| < PLUS:	"+">
	| < MINUS:	"-">
	| < MULT:	"*">
	| < DIV:	"/">
}

// local tokens
TOKEN: { < #DIGITS : (["0"-"9"])+ > }

void foo():		// first function executed
{		// variable declariations
	Token t, t1;
	double value;
}

{		// BNF production rules
	(
		t = <NUM>
		{
			if(DEBUG)System.out.println("NUM consumed : " + t.image);
			value = Double.parseDouble(t.image);
		}	// action
		(<PLUS> t = <NUM> {value += Double.parseDouble(t.image);})*
	)+
	
	{if(DEBUG)System.out.println("value = " + value);}
}
